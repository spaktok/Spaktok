rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() { return request.auth != null; }
    function isOwner(userId) { return isAuthenticated() && request.auth.uid == userId; }
    function isAdmin() { return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true; }
    function isContentOwner(contentOwnerId) { return isOwner(contentOwnerId); }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) &&
                   !("isPremiumAccount" in request.resource.data) &&
                   !("premiumSlotId" in request.resource.data) &&
                   !("isAdmin" in request.resource.data) &&
                   !("friends" in request.resource.data) &&
                   !("sentFriendRequests" in request.resource.data) &&
                   !("receivedFriendRequests" in request.resource.data) &&
                   !("balance" in request.resource.data) &&
                   !("coins" in request.resource.data) &&
                   !("isVerified" in request.resource.data) &&
                   !("verifiedAt" in request.resource.data) &&
                   !("isIdVerified" in request.resource.data) &&
                   !("idVerifiedAt" in request.resource.data) &&
                   !("isBanned" in request.resource.data) &&
                   !("banReason" in request.resource.data) &&
                   !("banExpiresAt" in request.resource.data) &&
                   !("warningCount" in request.resource.data) &&
                   !("parentalControls" in request.resource.data) &&
                   !("age" in request.resource.data) &&
                   !("isAgeVerified" in request.resource.data) &&
                   !("ageVerifiedAt" in request.resource.data);

      // Admin can update specific fields
      allow update: if isAdmin() &&
                   (request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                     "isPremiumAccount", "premiumSlotId", "isAdmin", "isVerified", "verifiedAt",
                     "isIdVerified", "idVerifiedAt", "isBanned", "banReason", "banExpiresAt",
                     "warningCount", "parentalControls", "age", "isAgeVerified", "ageVerifiedAt",
                     "balance", "coins"
                   ]));

      // Subcollections for user-specific data
      match /blockedUsers/{blockedUserId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
      match /conversations/{conversationId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
    }

    // Settings collection (for premium settings, etc.)
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Gifts collection
    match /gifts/{giftId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Gift Transactions (created by Cloud Functions)
    match /giftTransactions/{transactionId} {
      allow create: if false; // Only Cloud Functions
      allow read: if isOwner(resource.data.senderId) || isAdmin();
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow create: if isAuthenticated() && request.resource.data.participants.hasAny([request.auth.uid]);
      allow read, update: if isAuthenticated() && resource.data.participants.hasAny([request.auth.uid]);

      // Messages subcollection within conversations
      match /messages/{messageId} {
        allow create: if isAuthenticated() && request.resource.data.senderId == request.auth.uid && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
        allow read: if isAuthenticated() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
        allow update: if isAuthenticated() && request.resource.data.senderId == request.auth.uid && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
        allow delete: if isAuthenticated() && request.resource.data.senderId == request.auth.uid && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
      }
    }

    // Follow Requests
    match /followRequests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.requesterId == request.auth.uid;
      allow read: if isAuthenticated() && (isOwner(resource.data.requesterId) || isOwner(resource.data.targetId) || isAdmin());
      allow update: if isOwner(resource.data.targetId) && request.resource.data.status in ["accepted", "rejected"];
      allow delete: if isOwner(resource.data.requesterId) || isOwner(resource.data.targetId) || isAdmin();
    }

    // Followers collection (managed by Cloud Functions)
    match /followers/{followerId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only Cloud Functions
    }

    // Typing Indicators (real-time updates)
    match /typingIndicators/{typingId} {
      allow read: if isAuthenticated() && get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants.hasAny([request.auth.uid]);
      allow write: if isAuthenticated() && isOwner(request.resource.data.userId) && get(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)).data.participants.hasAny([request.auth.uid]);
    }

    // Calls collection (managed by Cloud Functions)
    match /calls/{callId} {
      allow create: if isAuthenticated() && request.resource.data.callerId == request.auth.uid;
      allow read: if isAuthenticated() && resource.data.participants.hasAny([request.auth.uid]);
      allow update: if isAuthenticated() && resource.data.participants.hasAny([request.auth.uid]);
      allow delete: if false; // Only Cloud Functions
    }

    // Ads System
    match /ads/{adId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    match /adImpressions/{impressionId} {
      allow create: if isAuthenticated();
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if false; // Impressions should not be modified after creation
    }

    match /adClicks/{clickId} {
      allow create: if isAuthenticated();
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if false; // Clicks should not be modified after creation
    }

    match /adConversions/{conversionId} {
      allow create: if isAuthenticated();
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if false; // Conversions should not be modified after creation
    }

    // Age & Safety Verification System
    match /idVerificationRequests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow update: if isAdmin();
    }

    // Reports & Penalties System
    match /reports/{reportId} {
      allow create: if isAuthenticated() && request.resource.data.reporterId == request.auth.uid;
      allow read: if isOwner(resource.data.reporterId) || isAdmin();
      allow update: if isAdmin();
    }

    match /warnings/{warningId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin(); // Only Cloud Functions or Admin
    }

    match /bans/{banId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create, update: if isAdmin(); // Only Cloud Functions or Admin
    }

    match /moderationReports/{reportId} {
      allow read: if isAdmin();
      allow create: if isAdmin(); // Only Cloud Functions or Admin
    }

    // Notifications System
    match /notifications/{notificationId} {
      allow create: if false; // Only Cloud Functions
      allow read: if isOwner(resource.data.userId);
      allow update: if isOwner(resource.data.userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["isRead", "readAt"]);
      allow delete: if isOwner(resource.data.userId);
    }

    // Platform Revenue (Admin Only)
    match /platformRevenue/{document=**} {
      allow read: if isAdmin();
      allow write: if isAdmin(); // Only Cloud Functions or Admin
    }

    // Revenue Log (Admin Only)
    match /revenueLog/{document=**} {
      allow read: if isAdmin();
      allow create: if isAdmin(); // Only Cloud Functions or Admin
    }

    // Videos collection (existing rules, ensure they are compatible)
    match /videos/{videoId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isContentOwner(resource.data.userId) || isAdmin();
      allow delete: if isContentOwner(resource.data.userId) || isAdmin();
    }

    // Stories collection (existing rules, ensure they are compatible)
    match /stories/{storyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isContentOwner(resource.data.userId) || isAdmin();
      allow delete: if isContentOwner(resource.data.userId) || isAdmin();
    }

    // Live Streams collection (existing rules, ensure they are compatible)
    match /liveStreams/{streamId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isContentOwner(resource.data.userId) || isAdmin();
      allow delete: if isContentOwner(resource.data.userId) || isAdmin();
    }

    // Other collections (default deny)
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
