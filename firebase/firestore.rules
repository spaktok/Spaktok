rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read/write for authenticated users only
    match /{document=**} {
      allow read, write: if request.auth != null;
    }

    // Public read for reels and stories (for unauthenticated viewing)
    match /reels/{reelId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /stories/{storyId} {
      allow read: if resource.data.privacy == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Comments: authenticated users can read and write to comments on reels
    match /reels/{reelId}/comments/{commentId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Disappearing Messages: only participants can read/write
    match /chats/{chatId} {
      allow read, write: if request.auth != null && resource.data.participants.contains(request.auth.uid);
    }

    // Friend Requests: authenticated users can send and manage their own requests
    match /friendRequests/{requestId} {
      allow read, write: if request.auth != null && (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
    }

    // AR Shopping Products: public read, only authenticated sellers can write
    match /ar_products/{productId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.sellerId;
    }

    // AR Shopping Carts: only the user can read/write their own cart
    match /carts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // AR Shopping Orders: only the user can read/write their own orders
    match /orders/{orderId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // AR Try-on History: only the user can read/write their own history
    match /ar_tryons/{tryOnId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // User profiles: public read, users can write their own profile
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Other services (e.g., snap_map_service, ai_translation_service) might not require direct Firestore rules
    // if they primarily interact with external APIs or have their own security mechanisms.
  }
}
